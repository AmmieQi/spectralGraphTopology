// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigenvalues
arma::vec eigenvalues(arma::mat M);
RcppExport SEXP _spectralGraphTopology_eigenvalues(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenvalues(M));
    return rcpp_result_gen;
END_RCPP
}
// eigenvectors
arma::mat eigenvectors(arma::mat M);
RcppExport SEXP _spectralGraphTopology_eigenvectors(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenvectors(M));
    return rcpp_result_gen;
END_RCPP
}
// objfunc
double objfunc(const Eigen::MatrixXd& Lw, const Eigen::MatrixXd& U, const Eigen::VectorXd& lambda, const Eigen::MatrixXd& Kmat, const double beta);
RcppExport SEXP _spectralGraphTopology_objfunc(SEXP LwSEXP, SEXP USEXP, SEXP lambdaSEXP, SEXP KmatSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Lw(LwSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type U(USEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(objfunc(Lw, U, lambda, Kmat, beta));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood
double loglikelihood(const Eigen::MatrixXd& Lw, const Eigen::VectorXd& lambda, const Eigen::MatrixXd& Kmat);
RcppExport SEXP _spectralGraphTopology_loglikelihood(SEXP LwSEXP, SEXP lambdaSEXP, SEXP KmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Lw(LwSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Kmat(KmatSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood(Lw, lambda, Kmat));
    return rcpp_result_gen;
END_RCPP
}
// logprior
double logprior(const double beta, const Eigen::MatrixXd& Lw, const Eigen::VectorXd& lambda, const Eigen::MatrixXd& U);
RcppExport SEXP _spectralGraphTopology_logprior(SEXP betaSEXP, SEXP LwSEXP, SEXP lambdaSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Lw(LwSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(logprior(beta, Lw, lambda, U));
    return rcpp_result_gen;
END_RCPP
}
// L
Eigen::MatrixXd L(const Eigen::VectorXd& w);
RcppExport SEXP _spectralGraphTopology_L(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(L(w));
    return rcpp_result_gen;
END_RCPP
}
// A
Eigen::MatrixXd A(const Eigen::VectorXd& w);
RcppExport SEXP _spectralGraphTopology_A(SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(A(w));
    return rcpp_result_gen;
END_RCPP
}
// Mmat
Eigen::MatrixXd Mmat(const int n);
RcppExport SEXP _spectralGraphTopology_Mmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Mmat(n));
    return rcpp_result_gen;
END_RCPP
}
// vecLmat
Eigen::MatrixXd vecLmat(const int n);
RcppExport SEXP _spectralGraphTopology_vecLmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(vecLmat(n));
    return rcpp_result_gen;
END_RCPP
}
// vec
Eigen::MatrixXd vec(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_vec(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(vec(M));
    return rcpp_result_gen;
END_RCPP
}
// Lstar
Eigen::VectorXd Lstar(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_Lstar(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Lstar(M));
    return rcpp_result_gen;
END_RCPP
}
// Linv
Eigen::VectorXd Linv(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_Linv(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Linv(M));
    return rcpp_result_gen;
END_RCPP
}
// altLstar
Eigen::VectorXd altLstar(const Eigen::MatrixXd& M);
RcppExport SEXP _spectralGraphTopology_altLstar(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(altLstar(M));
    return rcpp_result_gen;
END_RCPP
}
// blockDiagCpp
Eigen::MatrixXd blockDiagCpp(const std::vector<Eigen::MatrixXd>& matrices);
RcppExport SEXP _spectralGraphTopology_blockDiagCpp(SEXP matricesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type matrices(matricesSEXP);
    rcpp_result_gen = Rcpp::wrap(blockDiagCpp(matrices));
    return rcpp_result_gen;
END_RCPP
}
// Fscore
double Fscore(const Eigen::MatrixXd& Wtrue, const Eigen::MatrixXd& West, const double eps);
RcppExport SEXP _spectralGraphTopology_Fscore(SEXP WtrueSEXP, SEXP WestSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Wtrue(WtrueSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type West(WestSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Fscore(Wtrue, West, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spectralGraphTopology_eigenvalues", (DL_FUNC) &_spectralGraphTopology_eigenvalues, 1},
    {"_spectralGraphTopology_eigenvectors", (DL_FUNC) &_spectralGraphTopology_eigenvectors, 1},
    {"_spectralGraphTopology_objfunc", (DL_FUNC) &_spectralGraphTopology_objfunc, 5},
    {"_spectralGraphTopology_loglikelihood", (DL_FUNC) &_spectralGraphTopology_loglikelihood, 3},
    {"_spectralGraphTopology_logprior", (DL_FUNC) &_spectralGraphTopology_logprior, 4},
    {"_spectralGraphTopology_L", (DL_FUNC) &_spectralGraphTopology_L, 1},
    {"_spectralGraphTopology_A", (DL_FUNC) &_spectralGraphTopology_A, 1},
    {"_spectralGraphTopology_Mmat", (DL_FUNC) &_spectralGraphTopology_Mmat, 1},
    {"_spectralGraphTopology_vecLmat", (DL_FUNC) &_spectralGraphTopology_vecLmat, 1},
    {"_spectralGraphTopology_vec", (DL_FUNC) &_spectralGraphTopology_vec, 1},
    {"_spectralGraphTopology_Lstar", (DL_FUNC) &_spectralGraphTopology_Lstar, 1},
    {"_spectralGraphTopology_Linv", (DL_FUNC) &_spectralGraphTopology_Linv, 1},
    {"_spectralGraphTopology_altLstar", (DL_FUNC) &_spectralGraphTopology_altLstar, 1},
    {"_spectralGraphTopology_blockDiagCpp", (DL_FUNC) &_spectralGraphTopology_blockDiagCpp, 1},
    {"_spectralGraphTopology_Fscore", (DL_FUNC) &_spectralGraphTopology_Fscore, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_spectralGraphTopology(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
